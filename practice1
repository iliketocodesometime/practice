import pandas as pd
from datetime import timedelta

# Placeholder for loading the input dataset
# input = pd.read_csv('path_to_your_input_file.csv')

# Mock input data to demonstrate the script
data = {
    'dt2_report': pd.bdate_range('2023-01-01', '2024-12-31').union(
        pd.bdate_range('2023-01-01', '2024-12-31')
    ),
    'business_day': list(range(1, 262)) + list(range(1, 262)),
}
input_df = pd.DataFrame(data)

# Function to get the maximum business day of the same month from the previous year
def get_max_bd_previous_year(row, df):
    last_year = row['dt2_report'].year - 1
    same_month_last_year = df[(df['dt2_report'].dt.year == last_year) & 
                              (df['dt2_report'].dt.month == row['dt2_report'].month)]
    return same_month_last_year['business_day'].max()

# Filter for the most recent year and calculate the adjusted business day
most_recent_year = input_df['dt2_report'].dt.year.max()
recent_year_df = input_df[input_df['dt2_report'].dt.year == most_recent_year].copy()

# Start with the first business day
recent_year_df['adjusted_business_day'] = range(1, len(recent_year_df) + 1)

# Adjust the business day for month ends to match the max business day of the same month last year
for month in range(1, 13):
    # Get the last row for the current month
    last_day_of_month = recent_year_df[recent_year_df['dt2_report'].dt.month == month].iloc[-1]
    # Get the max business day of the same month from the previous year
    max_bd_previous_year = get_max_bd_previous_year(last_day_of_month, input_df)

    if pd.notna(max_bd_previous_year):
        # Adjust the business day for the last day of the month if necessary
        if last_day_of_month['business_day'] > max_bd_previous_year:
            recent_year_df.at[last_day_of_month.name, 'adjusted_business_day'] = max_bd_previous_year
        # Adjust the business day for the last day of the month if necessary
        if last_day_of_month['business_day'] < max_bd_previous_year:
            recent_year_df.at[last_day_of_month.name, 'adjusted_business_day'] = max_bd_previous_year
            # If it's the last day of the month and the previous max business day was higher, 
            # increase the business days for the next month starting from max_bd_previous_year + 1
            next_month = month % 12 + 1
            year = last_day_of_month['dt2_report'].year if next_month != 1 else last_day_of_month['dt2_report'].year + 1
            following_month_days = recent_year_df[(recent_year_df['dt2_report'].dt.month == next_month) & 
                                                  (recent_year_df['dt2_report'].dt.year == year)]
            for i, day in enumerate(following_month_days.itertuples(), start=max_bd_previous_year+1):
                recent_year_df.at[day.Index, 'adjusted_business_day'] = i

# Merge the adjusted business days back to the input dataframe
input_df = input_df.merge(recent_year_df[['dt2_report', 'adjusted_business_day']], 
                          on='dt2_report', 
                          how='left')

# Print out the first few rows of the dataframe to verify the results
print(input_df[input_df['dt2_report'].dt.year == most_recent_year].head(60))

# The actual dataframe will be returned for the user to save as needed
# Placeholder for saving the adjusted dataframe (the user will need to replace this with their actual file saving)
# input_df.to_csv('path_to_your_output_file.csv', index=False)
